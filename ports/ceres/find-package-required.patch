diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3a0debc..6997dac 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -270,7 +270,7 @@ if (NOT USE_CUDA)
 endif (NOT USE_CUDA)
 
 if (LAPACK)
-  find_package(LAPACK QUIET)
+  find_package(LAPACK REQUIRED)
   if (LAPACK_FOUND)
     message("-- Found LAPACK library: ${LAPACK_LIBRARIES}")
   else (LAPACK_FOUND)
@@ -292,8 +292,7 @@ if (SUITESPARSE)
   # built with SuiteSparse support.
 
   # Check for SuiteSparse and dependencies.
-  find_package(SuiteSparse 4.5.6 COMPONENTS CHOLMOD SPQR
-    OPTIONAL_COMPONENTS Partition)
+  find_package(SuiteSparse NAMES suitesparse REQUIRED)
   if (SuiteSparse_FOUND)
     set(SuiteSparse_DEPENDENCY "find_dependency(SuiteSparse ${SuiteSparse_VERSION})")
     # By default, if all of SuiteSparse's dependencies are found, Ceres is
@@ -301,11 +300,11 @@ if (SUITESPARSE)
     message("-- Found SuiteSparse ${SuiteSparse_VERSION}, "
             "building with SuiteSparse.")
 
-    if (SuiteSparse_NO_CMAKE OR NOT SuiteSparse_DIR)
+    if (0)
       install(FILES ${Ceres_SOURCE_DIR}/cmake/FindSuiteSparse.cmake
                     ${Ceres_SOURCE_DIR}/cmake/FindMETIS.cmake
               DESTINATION ${RELATIVE_CMAKECONFIG_INSTALL_DIR})
-    endif (SuiteSparse_NO_CMAKE OR NOT SuiteSparse_DIR)
+    endif ()
   else (SuiteSparse_FOUND)
     # Disable use of SuiteSparse if it cannot be found and continue.
     message("-- Did not find all SuiteSparse dependencies, disabling "
@@ -323,7 +322,7 @@ if (NOT SuiteSparse_Partition_FOUND)
 endif (NOT SuiteSparse_Partition_FOUND)
 
 if (EIGENMETIS)
-  find_package (METIS)
+  find_package(METIS NAMES metis REQUIRED)
   if (METIS_FOUND)
     # Since METIS is a private dependency of Ceres, it requires access to the
     # link-only METIS::METIS target to avoid undefined linker errors in projects
@@ -331,10 +330,10 @@ if (EIGENMETIS)
     # the link libraries (such as include directories.)
     set(METIS_DEPENDENCY "find_dependency(METIS ${METIS_VERSION})")
     # METIS find module must be installed unless a package config is being used.
-    if (NOT METIS_DIR)
+    if (0)
       install(FILES ${Ceres_SOURCE_DIR}/cmake/FindMETIS.cmake
               DESTINATION ${RELATIVE_CMAKECONFIG_INSTALL_DIR})
-    endif (NOT METIS_DIR)
+    endif ()
   else (METIS_FOUND)
     message("-- Did not find METIS, disabling Eigen METIS support.")
     update_cache_variable(EIGENMETIS OFF)
@@ -395,9 +394,9 @@ endif()
 # GFlags.
 if (GFLAGS)
   # Don't search with REQUIRED as we can continue without gflags.
-  find_package(gflags 2.2.0)
+  find_package(gflags CONFIG REQUIRED)
   if (gflags_FOUND)
-    if (TARGET gflags)
+    if (TARGET gflags::gflags)
       message("-- Found Google Flags (gflags) version ${gflags_VERSION}: ${gflags_DIR}")
     else()
       message("-- Detected version of gflags: ${gflags_VERSION} does not define "
diff --git a/internal/ceres/CMakeLists.txt b/internal/ceres/CMakeLists.txt
index 0aaabe4..0035a70 100644
--- a/internal/ceres/CMakeLists.txt
+++ b/internal/ceres/CMakeLists.txt
@@ -92,8 +92,8 @@ endif (NOT MINIGLOG)
 if (SUITESPARSE AND SuiteSparse_FOUND)
   # Define version information for use in Solver::FullReport.
   add_definitions(-DCERES_SUITESPARSE_VERSION="${SuiteSparse_VERSION}")
-  list(APPEND CERES_LIBRARY_PRIVATE_DEPENDENCIES SuiteSparse::CHOLMOD
-    SuiteSparse::SPQR)
+  list(APPEND CERES_LIBRARY_PRIVATE_DEPENDENCIES SuiteSparse::cholmod
+    SuiteSparse::spqr)
 
   if (SuiteSparse_Partition_FOUND)
     list(APPEND CERES_LIBRARY_PRIVATE_DEPENDENCIES SuiteSparse::Partition)
@@ -103,7 +103,7 @@ endif (SUITESPARSE AND SuiteSparse_FOUND)
 if (SuiteSparse_Partition_FOUND OR EIGENMETIS)
   # Define version information for use in Solver::FullReport.
   add_definitions(-DCERES_METIS_VERSION="${METIS_VERSION}")
-  list(APPEND CERES_LIBRARY_PRIVATE_DEPENDENCIES METIS::METIS)
+  list(APPEND CERES_LIBRARY_PRIVATE_DEPENDENCIES metis)
 endif (SuiteSparse_Partition_FOUND OR EIGENMETIS)
 
 if (ACCELERATESPARSE AND AccelerateSparse_FOUND)
@@ -396,7 +396,7 @@ if (BUILD_TESTING AND GFLAGS)
   if (CMAKE_SYSTEM_NAME MATCHES "QNX")
     target_link_libraries(gtest PUBLIC regex)
   endif()
-  target_link_libraries(gtest PRIVATE Ceres::ceres gflags)
+  target_link_libraries(gtest PRIVATE Ceres::ceres gflags::gflags)
 
   add_library(test_util STATIC
               evaluator_test_utils.cc
@@ -404,7 +404,7 @@ if (BUILD_TESTING AND GFLAGS)
               test_util.cc)
 
   target_include_directories(test_util PUBLIC ${Ceres_SOURCE_DIR}/internal)
-  target_link_libraries (test_util PUBLIC ceres_static gflags gtest)
+  target_link_libraries (test_util PUBLIC ceres_static gflags::gflags gtest)
 
   macro (CERES_TEST NAME)
     add_executable(${NAME}_test ${NAME}_test.cc)
